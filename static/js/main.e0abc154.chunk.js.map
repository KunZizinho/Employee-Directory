{"version":3,"sources":["components/Header.js","components/SearchTable.js","components/Nav.js","components/DataBody.js","components/DataTable.js","utils/API.js","components/DataArea.js","components/Main.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","fontFamily","fontSize","textDecoration","Component","SearchTable","handleSearchChange","marginTop","width","placeholder","height","marginRight","border","type","onChange","e","Nav","DataBody","users","undefined","name","map","picture","phone","email","location","login","key","uuid","src","medium","first","city","DataTable","props","headings","console","log","axios","get","DataArea","state","filterUsers","event","filter","target","value","filteredArray","item","Object","values","join","toLowerCase","indexOf","setState","API","then","res","data","results","this","Main","Wrapper","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0abc154.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n class Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n\r\n                <h1 style={{fontFamily: 'Times New Roman',fontSize: 60,\r\n                textDecoration: 'underline red'}}>Employee Directory</h1>\r\n\r\n             \r\n\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nfunction SearchTable({ handleSearchChange}) {\r\n        return(\r\n            <div>\r\n                <form className='form-block' style={{marginTop:30, width:1500}}>\r\n                   <input \r\n                   className=\"search\" \r\n                    placeholder='look through employees...' \r\n                    style={{width: 1000,height: 40,marginRight: 10, border: 'solid 2px'}}\r\n                    type='search'\r\n                    onChange={e => handleSearchChange(e)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default SearchTable;","import React from 'react';\r\nimport SearchTable from './SearchTable';\r\n\r\n\r\nfunction Nav({ handleSearchChange }) {\r\n\r\n    return (\r\n            <div className='navbar-flex'>\r\n                <SearchTable handleSearchChange={handleSearchChange} />\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nfunction DataBody({users})   \r\n    //map over users, for ea iteration well creat td tag\r\n    {\r\n        // let result=[];\r\n  \r\n\r\n    return (\r\n                <tbody>\r\n                {\r\n                 users[0].name !== undefined ? (\r\n                      users.map( ({picture, name, phone, email, location, login }) => {\r\n                       \r\n                    \r\n                          return(\r\n                          <tr key={login.uuid} >\r\n                              <td>\r\n                                  <img src={picture.medium}/>\r\n                              </td>\r\n                            <td> \r\n                                {name.first}\r\n                            </td>\r\n                            <td>\r\n                                {phone}\r\n                            </td>\r\n                            <td>\r\n                                {email}\r\n                            </td>\r\n                            <td>\r\n                                {location.city}\r\n                            </td>\r\n                          </tr>\r\n                          )\r\n                        })\r\n                        ) \r\n                        : (<></>)\r\n                }\r\n\r\n                    \r\n                </tbody>\r\n                \r\n            );\r\n\r\n};\r\n\r\nexport default DataBody;","import React from 'react';\r\nimport DataBody from './DataBody';\r\n\r\nfunction DataTable(props){\r\n    const {users, headings} = props;\r\n    console.log('here is heading: ', headings)\r\n    console.log('here is users: ', users)\r\n\r\n\r\n    return(\r\n        <div className='jumbotron-flex'>\r\n            <table className='table table-responsive'>\r\n                <thead>\r\n                    <tr>\r\n                        {headings.map(({name, width}) => {\r\n\r\n                            return(\r\n                                <th key={name}\r\n                                style={{width, border:'solid 1px'}}\r\n                                >\r\n                                    {name}\r\n                                </th>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                 <DataBody\r\n                    users={users}\r\n                />\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;","\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React, { Component } from 'react';\r\nimport Nav from './Nav';\r\nimport DataTable from './DataTable';\r\nimport DataBody from './DataBody';\r\nimport API from '../utils/API';\r\n\r\nclass DataArea extends Component {\r\n    state = {\r\n        users: [{}],\r\n        filterUsers: [{}]\r\n    };\r\n\r\n    headings = [\r\n        {name:'image', width:'10%'},\r\n        {name:'name', width:'10%'},\r\n        {name:'phone', width:'10%'},\r\n        {name:'email', width:'10%'},\r\n        {name:'location', width:'10%'}\r\n\r\n    ];\r\n\r\n\r\n\r\n    handleSearchChange = event => {\r\n        const filter = event.target.value;   \r\n        const filteredArray = this.state.users.filter( item =>{\r\n         //   console.log(item)\r\n          //  console.log('item', Object.values(item))\r\n        let values = Object.values(item).join('').toLowerCase();\r\n        return values.indexOf(filter.toLowerCase()) !==-1;\r\n     \r\n        })\r\n        console.log(filteredArray)\r\n        this.setState({ filterUsers: filteredArray })\r\n    };\r\n\r\n\r\n\r\n    componentDidMount(){\r\n        API.getUsers().then(res => {\r\n            // console.log('res: ', res)\r\n            this.setState({\r\n                users: res.data.results,\r\n                filterUsers: res.data.results\r\n            })\r\n        })\r\n    };\r\n\r\n    render() {\r\n\r\n        return( \r\n            <table className='table table-responsive'>\r\n                <Nav handleSearchChange={this.handleSearchChange}/>\r\n                <DataTable\r\n                    headings={this.headings}\r\n                    users={this.state.filterUsers} \r\n               />\r\n\r\n            </table>\r\n\r\n        );\r\n    }\r\n};\r\n\r\nexport default DataArea;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport DataArea from './DataArea';\r\n\r\n\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n\r\n            <DataArea />\r\n            \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\n\r\nfunction Wrapper(props) {\r\n\r\n    return <div className='wrapper'>\r\n                <Header />\r\n                <Main />\r\n            </div>\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport Wrapper from './components/Wrapper';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\n\r\n\r\nfunction App() {\r\n  return(\r\n    <div className='App'>\r\n      <Wrapper>\r\n        <Header/>\r\n        <Main/>\r\n      </Wrapper>\r\n\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}